mongodb_binary_archive : $RUNTIME_VALUE # This is a tar file containing bin/mongo(d/s/). Usually filled in by environment.
                                        # URL or local file path.
bin_dir                : mongodb        # String that will be used in the path of the installation directory
                                        # Useful to test multiple versions of MongoDB on same infrastructure (manual 
                                        # runs for analysing build failures)
journal_dir            : /media/ephemeral1/journal  # If specified, create a symlink to have journal at this path

mongod_config_file     :          # This section is literally a mongod config file
    replication :                 # as specified in https://docs.mongodb.org/manual/reference/configuration-options/
        replSetName    : myrs0    # We will use this and completely cease using command line options
    storage :                     # A test can specify any option supported by mongod, including undocumented ones
        engine         : wiredTiger
    # etc...
mongos_config_file     :
    # etc ...
configsvr_config_file       :
    # etc ...

# Note on execution order for the on_* hooks in mongodb_setup:
# 1. mongodb_setup: killall mongod/mongos (entire cluster)
# 2. mongodb_setup: delete old files / directories (e.g. from previous task)
# 3. download_files
# 4. upload_files
# 5. exec_remote (OS shell)
# 6. mongodb_setup: start mongod/mongos (entire cluster)
# 7. exec_mongo_shell (javascript in mongo shell)
# 8. post_exec_remote (OS shell)
#
# Note: each step is guaranteed to execute in isolation. e.g. "on_mongos" would iterate over 
# the list of mongos servers sequentially, it must not execute concurrently on all mongos servers.


on_all_hosts :
    download_files :
    upload_files :
        # Anything? Could download/upload data set or a data directory
    exec_remote : |
        # This would execute in OS shell (before MongoDB cluster is running)
    exec_mongo_shell : |
        # JavaScript to be executed in mongo shell (when MongoDB cluster is running)
        # Note: You can also put .js files in upload_files, and use load() to execute them in mongo shell.
    post_exec_remote : |
        # This would execute in OS shell (after MongoDB cluster is running)
on_servers :
on_mongod :
on_mongos :
on_configsvr :
on_workload_client :
on_host:
        # See above

# This defines the cluster topology to deploy, and what to deploy on which IP address.
# Note that it is also possible to override mongod/mongos config file entries on a per-node basis.
topology:
    # Note: It is allowed to, even if most tests wouldn't, specify multiple
    # sharded clusters, replica sets and/or standalone mongod's. Hence a list is used.
    # Initial sync test would specify one 2-node replica set, and a separate standalone server.
  - id: mycluster                             # Optional. Needed if someone ever would configure more than 1 cluster.
    type: sharded_cluster
    configsvr_type: csrs                      # or "sccc", which is currently not supported
    configsvr:
      - public_ip: ${infrastructure_provisioning.out.configsvr.0.public_ip}
        private_ip: ${infrastructure_provisioning.out.configsvr.0.private_ip}
        configsvr_config: ... # See the last mongod's below for an example of node specific config
      - public_ip: ${infrastructure_provisioning.out.configsvr.1.public_ip}
        private_ip: ${infrastructure_provisioning.out.configsvr.1.private_ip}
      - public_ip: ${infrastructure_provisioning.out.configsvr.2.public_ip}
        private_ip: ${infrastructure_provisioning.out.configsvr.2.private_ip}
    mongos:
      - public_ip: ${infrastructure_provisioning.out.mongos.0.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongos.0.private_ip}
        mongos_config: ... # See the last mongod's below for an example of node specific config
      - public_ip: ${infrastructure_provisioning.out.mongos.1.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongos.1.private_ip}
      - public_ip: ${infrastructure_provisioning.out.mongos.2.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongos.2.private_ip}
    shard: 
      - id: myrs0                # If specified, used as shard name when deploying the cluster.
        type: replset
        mongod:
          - public_ip: ${infrastructure_provisioning.out.mongod.0.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.0.private_ip}
            id: my_unique_id     # Shards, replica sets and mongod/mongos processes can have a unique id.
          - public_ip: ${infrastructure_provisioning.out.mongod.1.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.1.private_ip}
          - public_ip: ${infrastructure_provisioning.out.mongod.2.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.2.private_ip}
      - id: myrs1
        type: replset
        mongod:
          - public_ip: ${infrastructure_provisioning.out.mongod.3.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.3.private_ip}
          - public_ip: ${infrastructure_provisioning.out.mongod.4.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.4.private_ip}
          - public_ip: ${infrastructure_provisioning.out.mongod.5.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.5.private_ip}
      - id: myrs2
        type: replset
        mongod:
          - mongodb_binary_archive: <another url>     # Testing a cluster where some nodes are of a different version
            mongod_config: &diff_mongod_config        # And a different config.
              storage:                                # Note: These are merged (or "upserted") into the 
                engine: inMemory                      # global/common mongod_config specified above
            public_ip: ${infrastructure_provisioning.out.mongod.6.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.6.private_ip}
          - mongodb_binary_archive: <another url>
            mongod_config: *diff_mongod_config    
            public_ip: ${infrastructure_provisioning.out.mongod.7.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.7.private_ip}
          - mongodb_binary_archive: <another url>
            mongod_config: *diff_mongod_config    
            public_ip: ${infrastructure_provisioning.out.mongod.7.public_ip}
            private_ip: ${infrastructure_provisioning.out.mongod.7.private_ip}
  - type: replset
    mongod:
      - id: myid1
        public_ip: ${infrastructure_provisioning.out.mongod.8.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongod.8.private_ip}
      - id: myid2
        public_ip: ${infrastructure_provisioning.out.mongod.9.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongod.9.private_ip}
      - id: myid3
        public_ip: ${infrastructure_provisioning.out.mongod.10.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongod.10.private_ip}
  - cluster_type: standalone
    id: myid1
    public_ip: ${infrastructure_provisioning.out.mongod.11.public_ip}
    private_ip: ${infrastructure_provisioning.out.mongod.11.private_ip}


# Meta data about this mongodb setup
# It is possible to provide meta data that is not used by mongodb_setup itself, but that can be convenient to reference 
# from the other modules. In particular, see the test_control module doing that in run.0.workload_config.mongo
meta :
    # The list of hosts that can be used in a mongodb connection string
    hosts         : >
                    ${mongodb_setup.topology.0.mongos.0.private_ip}:27017, #no line break here
                    ${mongodb_setup.topology.0.mongos.1.private_ip}:27017,
                    ${mongodb_setup.topology.0.mongos.2.private_ip}:27017
    username      : myusername
    password      : mypassword
    is_sharded    : true
    is_replset    : false

