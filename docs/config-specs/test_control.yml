# Note: Until we purge mission-control, these are still hard coded, so you can't actually change them yet
output_file:
  mongoshell: test_screen_capture.log--ec2-user@${infrastructure_provisioning.out.workload_client.0.public_ip}
  ycsb: test_screen_capture.log--ec2-user@${infrastructure_provisioning.out.workload_client.0.public_ip}
  fio: fio.json
  iperf: iperf.json
# As I'm writing this, the basename IS the name. PERF-1096 will add a unique component.
reports_dir_basename: reports
perf_json:
  path: perf.new.json

# This essentially ports dsi/clusters/*/*.json to yml. Additions are up for debate.
# Note, unlike other files, this is a list of test runs. Hence, even if there's only a single entry, it is a list.
run:
  - id: benchRun  # For some tests (such as YCSB), this is used as the testname when reporting results.
    type: mongoshell   # or "ycsb"

    cmd: $DSI_PATH/workloads/run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:  # This section will be copied out into a file and given as config file to the benchmark tool. Can be yml (run_workloads.py) or a text block (ycsb)
      ########################################################################
      # Test lists. Command line will indicate which list of tests to execute.
      # The 'default' list is the default.
      # When testing new test workloads, please put your tests in the
      # tests.test list, and remove the existing hello.js
      ########################################################################
      tests:
        default:
          - contended_update.js
          - map_reduce.js
          - insert_vector.js:
              # For clarity(?), thread_levels are in a lookup table further down
              # The following reference is recursive. The intermediate step resolves to
              # something like
              # ${test_control.thread_levels.insert_vector.standalone.wiredTiger}
              thread_levels: ${test_control.thread_levels.insert_vector.${mongodb_setup.meta.mongodb_setup}.${mongodb_setup.meta.storageEngine}}
        initialsync:
          - initialsync.js
        correctness:
          - election_timing.js
          - election_timing_workload.js
        test:  # Put new workloads here when testing
          - hello.js:
              parameter1: foo
              parameter2: true

      mongo:
        # Note: We shall move to use a connection string for all tests. This allows things like
        # multiple mongoses to be supported automatically
        # (After consideration, don't want automatic failover for perf tests. If it fails, fail
        # hard.)
        uri: mongodb://${mongodb_setup.meta.hosts}/testdb?readPreference=PRIMARY
        sharded: ${mongodb_setup.meta.is_sharded}
        replica: ${mongodb_setup.meta.is_replset}
    # configure a set of tasks that run for the life span of this test. They are run AFTER the
    # pre_* hooks. There is no defined order as this is an object rather than a sequence.
    # The out for each task is captured to a file named:
    #     reports/{{task}}/{{test_id}}/{{background task key}}.log--{{user}}@{{host}}
    # where 'background task key' is background_traffic, start_time and iostat
    # in the following sample
    background_tasks:
      background_traffic: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/media/ephemeral0/ ./mongoreplay play -p /media/ephemeral0/playback.bson --host mongodb://${mongodb_setup.meta.hosts} --no-preprocess
      start_time: echo "the current time is $(date)"
      iostat: |
        # Poor mans FTDC
        while true ; do
          iostat -xt 1
          sleep 1
        done | awk '{ print strftime("%Y-%m-%dT%H:%M:%S"), $0; fflush(); }'

    # Indicate that mongodb database validation checks should be skipped. Defaults to false.
    skip_validate: false


# This is just a lookup table. Each test may reference some leaf node here from a test parameter.
thread_levels:
  # Note: This is just an example for one test. Other tests have their own thread levels.
  # It is of course possible that many tests share the same thread levels though, so this section
  # can hopefully be shorter than a full cross join of everything.
  insert_vector:
    standalone:
      mmapv1: [1, 2]
      wiredTiger: [1, 8, 16]
    single-replica:
      mmapv1: [1, 2]
      wiredTiger: [1, 8, 16]
    replica:
      mmapv1: [1, 2]
      wiredTiger: [1, 8, 16]
    shard:
      mmapv1: [1, 32]
      wiredTiger: [1, 32, 64]

# Ordered list of things to do before the set of runs start
pre_task:
  # Valid targets are:
  # on_workload_client, on_mongos, on_mongod, on_configsvr, on_all_hosts, on_all_servers, on_localhost
  # on_all_hosts includes all the hosts in the out file, while on_all_servers exclude the workload clients.
  - on_workload_client:
      # Valid within here are upload_repo_files, upload_files, retrieve_files, exec and
      # exec_mongo_shell
      upload_files:
        # Upload file local_file_path to remote_file_path. Paths
        # should include the file names (not just a target directory_
        - source: local_file_path
          target: remote_file_path
      upload_repo_files:
        # This is the same as upload_files, but looks for the files relative to DSI root
        - source: local_file_path
          target: remote_file_path
  - on_workload_client:
      exec: |
        # code to be executed on workload client (when MongoDB cluster is running)
  - on_workload_client:
      exec_mongo_shell:
        script: |
          # JavaScript to be executed in a mongo shell (when MongoDB cluster is running)
        connection_string: ${mongodb_setup.meta.hosts}  # Defaults to localhost
# Ordered list of things to do after all the runs
post_task:
  - on_workload_client:
      # All of the above, plus...
      retrieve_files:
        # Download remote path to ./reports/host_alias/local path
        # host_alias: looks like "<category>.<index>" from ConfigDict['infrastructure']['.out']
        # category: the key name from ConfigDict['infrastructure']['.out'], it is
        # one of "mongod", "mongos", "configsvr" or "workload_client"
        # index: the position in ConfigDict['infrastructure']['out']['category']
        - source: remote_path
          target: local_path
  - on_workload_client:
      retrieve_files:
        - source: workloads/workload_timestamps.csv
          target: workloads_timestamps.csv
        - source: fio.json
          target: fio.json

# Ordered list of things to do before each test, after pre_task
pre_test:
  - on_mongos: (see above)
  - on_mongod: (see above)
  - on_configsvr: (see above)

# Ordered list of things to do after each test, before post_task
post_test:
  - on_mongod: (see above)
  - on_all_hosts: (see above)
