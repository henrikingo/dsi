"""Unit tests for `ftdc_analysis.py`."""
# pylint: disable=protected-access

import os
import unittest

import ftdc_analysis
from tests import test_utils


class TestFtdcAnalysis(unittest.TestCase):
    """Test suite."""

    def test_resource_rules_pass(self):
        """ Specifically test that we get the expected report info for resource sanity checks
        """
        dir_path = test_utils.fixture_file_path('core_workloads_reports')
        project = 'sys-perf'
        variant = 'linux-standalone'
        constant_values = {'max_thread_level': 64}
        observed_result = ftdc_analysis.resource_rules(dir_path, project, variant, constant_values)
        expected_result = {
            'status': 'pass',
            'end': 1,
            'log_raw': '\nPassed resource sanity checks.',
            'exit_code': 0,
            'start': 0,
            'test_file': "resource_sanity_checks"
        }
        self.assertEqual(observed_result, expected_result)

    def test_failure_message(self):
        """Test formatting of the failure_message() in ftdc_analysis.

        Note: The input file_rule_failures is generated by following lines of code

        path_ftdc_repllag = test_utils.fixture_file_path('test_repllag')
        path_ftdc = os.path.join(path_ftdc_repllag, 'metrics.mongod.0')
        perf_json = os.path.join(path_ftdc_repllag, 'perf.json')
        test_times = util.get_test_times(perf_json)
        MS = 1000
        output = ftdc_analysis._ftdc_file_rule_evaluation(
            path_ftdc, "sys-perf", "linux-3-node-replSet", test_times)
        import pprint
        pprint.pprint(output)
        self.assertEqual(output, "")
        """

        rule_info = [{
            'additional': {
                'lag end threshold (s)': 2.0,
                'lag start threshold (s)': 15.0,
                'primary member': '0'
            },
            'members': {
                '1': {
                    'compared_values': [
                        (16.0, '2017-05-31 16:54:42Z', 129.0, '2017-05-31 16:54:42Z', 120.0),
                        (17.0, '2017-05-31 16:59:23Z', 104.0, '2017-05-31 16:59:26Z',
                         99.0), (16.0, '2017-05-31 17:04:33Z', 117.0, '2017-05-31 17:04:34Z',
                                 110.0), (16.0, '2017-05-31 17:09:13Z', 93.0,
                                          '2017-05-31 17:09:32Z', 12.0)
                    ],
                    'labels': ('start value (s)', 'max time', 'max value (s)', 'end time',
                               'end value (s)'),
                    'report_all_values':
                        True,
                    'times': [1496248949000, 1496249726000, 1496250019000, 1496250331000]
                },
                '2': {
                    'compared_values': [(16.0, '2017-05-31 16:54:03Z', 90.0, '2017-05-31 16:54:04Z',
                                         82.0), (16.0, '2017-05-31 16:58:53Z', 76.0,
                                                 '2017-05-31 16:59:00Z', 72.0),
                                        (16.0, '2017-05-31 17:03:53Z', 80.0, '2017-05-31 17:03:58Z',
                                         77.0), (16.0, '2017-05-31 17:08:53Z', 70.0,
                                                 '2017-05-31 17:08:54Z', 62.0)],
                    'labels': ('start value (s)', 'max time', 'max value (s)', 'end time',
                               'end value (s)'),
                    'report_all_values':
                        True,
                    'times': [1496248967000, 1496249735000, 1496250027000, 1496250339000]
                }
            }
        }]
        file_rule_failures = {'ftdc_replica_lag_check': rule_info}

        test_dir = test_utils.fixture_file_path('test_repllag')
        ok_file = os.path.join(test_dir, 'failure_message.txt.ok')
        with open(ok_file) as ok_file_handle:
            expected = ok_file_handle.read()

        log_raw = ftdc_analysis._ftdc_log_raw(file_rule_failures, {}, 1000)
        self.assertEqual(log_raw, expected)

    def test__get_host_ip_info(self):
        """ add tests for the new reports directory layout """

        return_value = ftdc_analysis._get_host_ip_info('diag-p1-54.83.180.179')
        self.assertTrue(return_value is None)

        return_value = ftdc_analysis._get_host_ip_info('mongod.0')
        expected = 'mongod.0'
        self.assertEqual(return_value, expected)


if __name__ == '__main__':
    unittest.main()
