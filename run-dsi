#!/usr/bin/env bash

set -eou pipefail
_pip() {
    /usr/bin/env pip "$@" --isolated -q -q
}

pushd "$(dirname "$0")" >/dev/null
    DIR="$(pwd -P)"
popd >/dev/null



if [[ $# -lt 1 ]]; then
    echo -e "Usage: \\n\\t$0 setup\\n\\t$0 command-provided-by-setup.py" >/dev/stderr
    exit 5
fi

# Check for dsi-setup-done which we create at the end of setup.
# This prevents half-setup environments.
if [[ ! -d "${DIR}/dsi_venv" || ! -e "${DIR}/dsi_venv/dsi-setup-done" ]]; then
    rm -rf "dsi_venv"

    python_path=/opt/mongodbtoolchain/v2/bin/python2.7
    if [[ ! -e "$python_path" ]]; then
        echo "${python_path} does not exist"
        python_path="$(command -v python2.7)"
    fi
    echo "creating new env with python: ${python_path}"
    _pip install virtualenv
    /usr/bin/env virtualenv -q "${DIR}/dsi_venv" --python="${python_path}"

    set +u
        # shellcheck source=/dev/null
        source "${DIR}/dsi_venv/bin/activate"
    set -u

    # Install DSI requirements
    _pip install -r "${DIR}/requirements.txt"

    # This script runs in the work directory.
    _pip freeze > "../pip-requirements.txt" 2>/dev/null

    # Record that we've done setup at the current git sha.
    # (Don't use the sha for nwo but might in the future to determine
    # if we need to run pip install again or something.)
    pushd "${DIR}" >/dev/null
        git rev-parse HEAD > "${DIR}/dsi_venv/dsi-setup-done"
    popd >/dev/null
fi


if [[ "$1" != "setup" ]]; then
    export VIRTUAL_ENV_DISABLE_PROMPT=1  # prevent undefined $PS1 variable
    # shellcheck source=/dev/null
    source "${DIR}/dsi_venv/bin/activate"

    /usr/bin/env "$@"
fi
