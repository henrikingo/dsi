run:
  # - id: fio-${mongodb_setup.mongod_config_file.storage.engine}
  #   type: shell
  #   cmd: '${test_control.numactl} ./fio-test.sh ${mongodb_setup.meta.hostname}'
  #   config_filename: fio.ini
  #   workload_config: ${test_control.common_fio_config}
  # - id: iperf
  #   type: shell
  #   cmd: '${test_control.numactl} ./iperf-test.sh ${mongodb_setup.meta.hostname}'
  - id: benchRun-${mongodb_setup.mongod_config_file.storage.engine}
    type: shell
    cmd: cd workloads &&  ${test_control.numactl} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
        tests:
          initialsync:
            - initialsync.js
          initialsync_c_1_d_1_w_f:
            - initialsync.js:
                num_collections: 1
                num_dbs: 1
                write_load: false
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_1_d_32_w_f:
            - initialsync.js:
                num_collections: 1
                num_dbs: 32
                write_load: false
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_32_d_1_w_f:
            - initialsync.js:
                num_collections: 32
                num_dbs: 1
                write_load: false
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_32_d_32_w_f:
            - initialsync.js:
                num_collections: 32
                num_dbs: 32
                write_load: false
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_1_d_1_w_t:
            - initialsync.js:
                num_collections: 1
                num_dbs: 1
                write_load: true
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_1_d_32_w_t:
            - initialsync.js:
                num_collections: 1
                num_dbs: 32
                write_load: true
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_32_d_1_w_t:
            - initialsync.js:
                num_collections: 32
                num_dbs: 1
                write_load: true
                third_node_addr: ${mongodb_setup.meta.third_node}
          initialsync_c_32_d_32_w_t:
            - initialsync.js:
                num_collections: 32
                num_dbs: 32
                write_load: true
                third_node_addr: ${mongodb_setup.meta.third_node}
            - cpu_noise.js

        # These next five lines match existing
        # workloads.yml. Workloads needs to be updated to consume from
        # mongo entry.
        target: ${mongodb_setup.meta.hostname}
        port: ${mongodb_setup.meta.port}
        # Hard coding for now. These aren't working right now
        sharded: ${mongodb_setup.meta.is_sharded}
        replica: ${mongodb_setup.meta.is_replset}
        storageEngine: ${mongodb_setup.mongod_config_file.storage.engine}
        scale_factor: ${mongodb_setup.meta.primaries}
        test_list: initialsync_c_1_d_1_w_f
        mongo:
            # It turns out the shell supports connection strings, but
            # benchRun itself does not.
            uri: ${mongodb_setup.meta.hosts}
            # Hard coding for now. These aren't working right now
            sharded: ${mongodb_setup.meta.is_sharded}
            replica: ${mongodb_setup.meta.is_replset}
            storageEngine: ${mongodb_setup.mongod_config_file.storage.engine}

pre_task:
  # - on_all_hosts:
  #     # Install iperf. It isn't available in yum on AWS instances
  #     exec: |
  #       sudo killall iperf3
  #       rm -rf iperf
  #       git clone https://github.com/esnet/iperf
  #       cd iperf/
  #       ./configure
  #       make
  #       sudo make install
  - on_localhost:
      exec: $DSI_PATH/bin/setup-workloads.sh
  - on_workload_client:
      exec: rm -rf workloads*
  - on_workload_client:
      # upload_repo_files:
      #   bin/process_fio_results.py: process_fio_results.py
      #   bin/process_iperf_results.py: process_iperf_results.py
      #   bin/fio-test.sh: fio-test.sh
      #   bin/iperf-test.sh: iperf-test.sh
      upload_files:
        workloads.tar.gz: workloads.tar.gz
  - on_workload_client:
      exec: |
        rm -rf workloads
        mkdir workloads
        tar zxvf workloads.tar.gz -C workloads
        # chmod 755 fio-test.sh
        # chmod 755 iperf-test.sh
  - on_workload_client:
      upload_files:
        workloads.yml: workloads/workloads.yml  # This is redundant with the run-initial sync script
        # fio.ini: fio.ini
post_task:
  - on_workload_client:
      retrieve_files:
        workloads/workload_timestamps.csv: ../workloads_timestamps.csv
        # fio.json: ../fio.json
        # iperf.json: ../iperf.json
