task_name: bestbuy_agg
run:
  - id: benchRun
    type: mongoshell

    cmd: cd workloads && ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c ../workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    output_files:
      - workloads/workload_timestamps.csv
    workload_config:
      ########################################################################
      # Test lists. Command line will indicate which list of tests to execute.
      # The 'default' list is the default.
      # When testing new test workloads, please put your tests in the
      # tests.test list, and remove the existing hello
      ########################################################################
      tests:
        default:
          - bestbuy_agg_query_comparison:
              - testDbName: bestbuy
                testCollName: products
                useAgg: true
          - cpu_noise

      # These next five lines match existing
      # workloads.yml. Workloads needs to be updated to consume from
      # mongo entry.
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      # Hard coding for now. These aren't working right now
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      test_list: default

  - id: fio
    type: fio
    cmd: '${infrastructure_provisioning.numactl_prefix} ./fio-test.sh ${mongodb_setup.meta.hostname}'
    config_filename: fio.ini
    output_files:
      - fio.json
      - fio_results.tgz
    workload_config: ${test_control.common_fio_config}
    skip_validate: true

  - id: iperf
    type: iperf
    output_files:
      - iperf.json
    cmd: '${infrastructure_provisioning.numactl_prefix} ./iperf-test.sh ${mongodb_setup.meta.hostname}'
    skip_validate: true

pre_task:
  - on_workload_client:
      # Preshard the cluster if running on a sharded cluster
      exec_mongo_shell:
        connection_string: "${mongodb_setup.meta.hostname}:${mongodb_setup.meta.port}"
        script: |
          if ("${mongodb_setup.meta.is_sharded}" == "True") {

            // The following variables that are specific to the workload.
            // NOTE: the splits must be in order.
            var ns = 'bestbuy.products';
            var keyPattern = { "type" : 1, "productId" : 1 };
            var splits = [
              { type: MinKey,     productId: MinKey},
              { type: 'Game',     productId: NumberLong('1218086489034')},
              { type: 'HardGood', productId: NumberLong('1118840368488')},
              { type: 'HardGood', productId: NumberLong('1218105505555')},
              { type: 'HardGood', productId: NumberLong('1218379812886')},
              { type: 'HardGood', productId: NumberLong('1218475610897')},
              { type: 'HardGood', productId: NumberLong('1218618813745')},
              { type: 'HardGood', productId: NumberLong('1218728444211')}, // 8,9
              { type: 'HardGood', productId: NumberLong('1219080834391')},
              { type: 'HardGood', productId: NumberLong('1219736622160')}, // 7
              { type: 'Movie',    productId: NumberLong('28132')},         // 6
              { type: 'Movie',    productId: NumberLong('44465')},
              { type: 'Movie',    productId: NumberLong('59159')},         // 5
              { type: 'Movie',    productId: NumberLong('1344253')},
              { type: 'Movie',    productId: NumberLong('1459047')},       // 8,9
              { type: 'Movie',    productId: NumberLong('1627489')},       // 4
              { type: 'Movie',    productId: NumberLong('1921771')},
              { type: 'Movie',    productId: NumberLong('2180510')},
              { type: 'Movie',    productId: NumberLong('2702290')},       // 7
              { type: 'Movie',    productId: NumberLong('3313579')},
              { type: 'Music',    productId: NumberLong('73927')},         // 3,6
              { type: 'Music',    productId: NumberLong('97408')},         // 8,9
              { type: 'Music',    productId: NumberLong('120846')},
              { type: 'Music',    productId: NumberLong('145563')},
              { type: 'Music',    productId: NumberLong('172542')},        // 5
              { type: 'Music',    productId: NumberLong('199025')},
              { type: 'Music',    productId: NumberLong('226846')},
              { type: 'Music',    productId: NumberLong('261778')},        // 7
              { type: 'Music',    productId: NumberLong('301467')},        // 8,9
              { type: 'Music',    productId: NumberLong('1337396')},
              { type: 'Music',    productId: NumberLong('1393391')},       // 4,6
              { type: 'Music',    productId: NumberLong('1443146')},
              { type: 'Music',    productId: NumberLong('1484664')},
              { type: 'Music',    productId: NumberLong('1531482')},
              { type: 'Music',    productId: NumberLong('1582679')},
              { type: 'Music',    productId: NumberLong('1624125')},       // 8,9
              { type: 'Music',    productId: NumberLong('1686112')},       // 5,7
              { type: 'Music',    productId: NumberLong('1778529')},
              { type: 'Music',    productId: NumberLong('1815087')},
              { type: 'Music',    productId: NumberLong('1858555')},
              { type: 'Music',    productId: NumberLong('1920647')},       // 3,6
              { type: 'Music',    productId: NumberLong('1992906')},
              { type: 'Music',    productId: NumberLong('2067260')},       // 8,9
              { type: 'Music',    productId: NumberLong('2149519')},
              { type: 'Music',    productId: NumberLong('2229905')},
              { type: 'Music',    productId: NumberLong('2305925')},       // 4
              { type: 'Music',    productId: NumberLong('2428992')},
              { type: 'Music',    productId: NumberLong('2558418')},
              { type: 'Music',    productId: NumberLong('2656772')},       // 5,7
              { type: 'Music',    productId: NumberLong('2709433')},       // 8,9
              { type: 'Music',    productId: NumberLong('2776923')},       // 6
              { type: 'Music',    productId: NumberLong('2820755')},
              { type: 'Music',    productId: NumberLong('2864319')},
              { type: 'Music',    productId: NumberLong('2900297')},
              { type: 'Music',    productId: NumberLong('2933428')},
              { type: 'Music',    productId: NumberLong('2971126')},
              { type: 'Music',    productId: NumberLong('3230451')},       // 7,8,9
              { type: 'Music',    productId: NumberLong('3310959')},
              { type: 'Music',    productId: NumberLong('3383162')},
              { type: 'Music',    productId: NumberLong('3514683')},
            ];

            // The remaining code should be boiler plate.

            // Get a list of the shard names.
            var config = db.getSiblingDB("config");
            var shards = config.shards.find({},{_id:1}).map(function(s){return s._id;});

            // Utility function to split a chunk in the middle.
            // See https://docs.mongodb.com/manual/reference/command/split/.
            // The split document must contain:
            //     ns {string} the collection names.
            //     middle {document} the split point.
            var splitter = function(split){
              return db.adminCommand({split: split.ns, middle: split.middle});
            };
            // Utility function to move a chunk.
            // See https://docs.mongodb.com/manual/reference/command/moveChunk/
            // The split document must contain:
            //     ns {string} the collection names
            //     middle {document} the split point
            //     shard {string} the destination shard
            var mover = function(split){
              return sh.moveChunk(split.ns, split.middle, split.shard);
            };

            assert.commandWorked(sh.enableSharding(ns.split('.')[0]));
            assert.commandWorked(sh.shardCollection(ns, keyPattern));

            // The filter function gets every nth split point. For a 3 shard cluster
            // this is every third. If the split points are even then the data in
            // these shards should be evenly distributed.
            //
            // The map function creates a new document of the format required by the
            // splitter and mover functions.
            // That is, it creates a document with:
            //    shard {string} the destination shard
            //    ns {string} the fully qualified collection namespace
            //    middle {document} the split point
            //
            // For a reasonable number of splits filter is ok. For a very large number
            // it will perform poorly. BUT, even in this case, it will probably be negligible.
            var distribution =  splits.filter(function(element, index){
              return index % Math.round(splits.length / shards.length) == 0;
            }).map(function(middle, i) {
              return {shard:shards[i], middle:middle, ns: ns};
            });
            // Disable balancing. If the split points are fair, then the cluster will still
            // be in balance at the end of the restore.
            sh.stopBalancer();

            // Create the split points.
            // NOTE: to create N chunks, you only need N - 1 split points.
            distribution.slice(1).forEach(function(split){ assert.commandWorked(splitter(split));});

            // Move the chunks to specific shards.
            distribution.forEach(function(split){ assert.commandWorked(mover(split));});

            db.printShardingStatus();
          } else {
            print ("Non-sharded cluster");
          }
  - on_workload_client:
      exec: |
        # Download and install the dataset
        # Dataset is from the BestBuy Developer API website: https://bestbuyapis.github.io/api-documentation/#overview
        cd data
        curl -O --retry 10 -fsS https://s3-us-west-2.amazonaws.com/dsi-donot-remove/AggPerformance/bestbuyproducts.bson.gz
        ~/bin/mongorestore --quiet -h ${mongodb_setup.meta.hostname} --port=${mongodb_setup.meta.port} --gzip --archive=bestbuyproducts.bson.gz  || exit $?
        ~/bin/mongo --host ${mongodb_setup.meta.hostname} --port=${mongodb_setup.meta.port} --eval 'db.getSiblingDB("bestbuy").products.getShardDistribution()'

post_task:
  exec: |
    rm data/bestbuy* # Cleanup download files.
  exec_mongo_shell:
    connection_string: "${mongodb_setup.meta.hostname}:${mongodb_setup.meta.port}"
    script: |
      if ("${mongodb_setup.meta.is_sharded}" == "True") {
        // re-enable the balancer
        assert.commandWorked(sh.setBalancerState(true));
        db.printShardingStatus();
      }
