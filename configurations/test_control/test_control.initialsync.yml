task_name: initialSync
run:
  - id: initialsync_c_1_d_1_w_f
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 1
              num_dbs: 1
              write_load: false
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: &pretest
      - on_workload_client:
          upload_files:
            workloads.yml: workloads/workloads.yml
    post_test: &posttest
      - on_workload_client:
          retrieve_files:
            workloads/workload_timestamps.csv: ../workloads_timestamps.csv

  - id: initialsync_c_1_d_32_w_f
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 1
              num_dbs: 32
              write_load: false
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: initialsync_c_32_d_1_w_f
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 32
              num_dbs: 1
              write_load: false
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: initialsync_c_32_d_32_w_f
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 32
              num_dbs: 32
              write_load: false
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: initialsync_c_1_d_1_w_t
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 1
              num_dbs: 1
              write_load: true
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: initialsync_c_1_d_32_w_t
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 1
              num_dbs: 32
              write_load: true
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: initialsync_c_32_d_1_w_t
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 32
              num_dbs: 1
              write_load: true
              third_node_addr: ${mongodb_setup.meta.third_node}
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: initialsync_c_32_d_32_w_t
    type: mongoshell
    cmd: cd workloads &&  ${infrastructure_provisioning.numactl_prefix} ./run_workloads.py -c workloads.yml
    config_filename: workloads.yml  # The name used in previous row
    workload_config:
      tests:
        default:
          - initialsync.js:
              num_collections: 32
              num_dbs: 32
              write_load: true
              third_node_addr: ${mongodb_setup.meta.third_node}
          - cpu_noise.js
      target: ${mongodb_setup.meta.hostname}
      port: ${mongodb_setup.meta.port}
      sharded: ${mongodb_setup.meta.is_sharded}
      replica: ${mongodb_setup.meta.is_replset}
      scale_factor: ${mongodb_setup.meta.primaries}
      third_node_addr: ${mongodb_setup.meta.third_node}
    pre_test: *pretest
    post_test: *posttest

  - id: fio
    type: fio
    cmd: '${infrastructure_provisioning.numactl_prefix} ./fio-test.sh ${mongodb_setup.meta.hostname}'
    config_filename: fio.ini
    workload_config: ${test_control.common_fio_config}
    skip_validate: true
    pre_test:
      - on_workload_client:
          upload_files:
            fio.ini: fio.ini
    post_test:
      - on_workload_client:
          retrieve_files:
            fio.json: ../fio.json

  - id: iperf
    type: iperf
    cmd: '${infrastructure_provisioning.numactl_prefix} ./iperf-test.sh ${mongodb_setup.meta.hostname}'
    skip_validate: true
    post_test:
      - on_workload_client:
          retrieve_files:
            iperf.json: ../iperf.json

# Initial sync test explicitly requests the clean restart of mongodb. Explicitly including here
# regardless of setting in defaults.yml
between_tests:
  - restart_mongodb:
      clean_logs: true
      clean_db_dir: true

pre_task:
  - on_all_hosts:
      # Install iperf. It isn't available in yum on AWS instances
      exec: |
        sudo killall iperf3
        rm -rf iperf
        git clone https://github.com/esnet/iperf
        cd iperf/
        git checkout d06415822a
        ./configure
        make
        sudo make install
  - on_localhost:
      exec: $DSI_PATH/bin/setup-workloads.sh
  - on_workload_client:
      exec: rm -rf workloads*
  - on_workload_client:
      upload_repo_files:
        bin/fio-test.sh: fio-test.sh
        bin/iperf-test.sh: iperf-test.sh
      upload_files:
        workloads.tar.gz: workloads.tar.gz
  - on_workload_client:
      exec: |
        rm -rf workloads
        mkdir workloads
        tar zxvf workloads.tar.gz -C workloads
