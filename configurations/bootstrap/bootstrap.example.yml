# Input for bootstrap.py which prepares an environment to provision resources for local performance
# testing. The bootstrap phase takes as input a small number of parameters which describe the system
# to be created. Based on these bootstrap parameters, bootstrap.py will prepare a work directory
# that contains additional .yml configuration files, terraform related files, etc. As an example,
# based on the infrastructure_provisioning key, it will put into place the related
# infrastructure_provisioning.yml file:
#
#     cp $DSI_PATH/configurations/infrastructure_provisioning/infrastructure_provisioning.cluster_type.yml infrastructure_provisioning.yml
#
# Please consult docs/ for more information.

# To run the DSI infrastructure, make a copy of this file, then edit the entries below for your use.
# Then, run:
#
#     $DSI_PATH/bin/bootstrap.py --directory work
#                                --bootstrap-file /path/to/your/copy/of/this/file
#
# Update the fields below to reflect personal information and desired configuration parameters.
# Run `bootstrap.py --list` to see a listing of possible values.

# OPTIONAL BUT RECOMMENDED (See $DSI_PATH/configurations/defaults.yml for default values):
infrastructure_provisioning: single
mongodb_setup: standalone
test_control: ycsb.short


# The following will be copied into a file overrides.yml. This is a handy way to set any other
# config option you want. The below values will override what is set in the other files.
overrides:
  infrastructure_provisioning:
    tfvars:
      # Personal information (REQUIRED)
      # Specify the path to your SSH private key file for AWS, the name of the key in EC2, and your
      # @10gen.com username. This is necessary to connect to your provisioned infrastructure. For a full
      # description, see the Requirements section of docs/GettingStarted.md
      ssh_key_file: ~/.ssh/NAME_OF_SSH_KEY  # SSH private keyfile to use with AWS (~/.ssh/USERNAME-dsikey if you're following the doc)
      ssh_key_name: NAME_OF_SSH_KEY  # The Name of the Key, as known in EC2 (USERNAME-dsikey if you're following the doc)

      tags:
        owner: your.username  # Your mongodb email address
        expire-on-delta: 24  # Set expire-on tag this many hours in the future. (Default is 2.)


  # Remaining config is OPTIONAL

  # Specify the paths for the repos 'workloads' and 'YCSB' & co.
  # They are available at https://github.com/10gen/workloads.
  # and https://github.com/mongodb-labs/YCSB, and are required for many of the test configurations.
  # If omitted, DSI will automatically clone the repo from github as needed.
  # workload_setup:
  #   local_repos:
  #     workloads: ./workloads
  #     ycsb: ./YCSB
  #     linkbench: ./linkbench
  #     tpcc: ./tpcc
  #     genny: ./data/genny  # Put genny on the large drive to give it more space.
  # If running on a mac or if you want a custom version of curator, put the url to the tgz here
  #   For mac, use: https://s3.amazonaws.com/mciuploads/curator/curator_macos_94b7400131699cb79429893d43995b02630c5aa3_19_03_01_22_34_56-macos/curator-dist-94b7400131699cb79429893d43995b02630c5aa3.tar.gz
  # Find more here: https://evergreen.mongodb.com/waterfall/curator
  # Select build-variant you want and navigate to 'build' task and grab the url for the dist.tar.gz artifact
  #  downloads:
  #    curator: "https://s3.amazonaws.com/boxes.10gen.com/build/curator/curator-dist-rhel70-f78d20b10c7a70783c5ec47cc466bd9933e00212.tar.gz"

  # mongodb_setup:
    ## The MongoDB binary to use.
    ## Note: It's also allowed to upload your own binary. Set this to the empty string "" to do that.
    # mongodb_binary_archive: mongodb_binary_archive: https://s3.amazonaws.com/mciuploads/dsi/sys_perf_4.0_caa42a1f75a56c7643d0b68d3880444375ec42e3/caa42a1f75a56c7643d0b68d3880444375ec42e3/linux/mongodb-sys_perf_4.0_caa42a1f75a56c7643d0b68d3880444375ec42e3.tar.gz
    #
    # atlas:
    ## When mongodb_setup = atlas, use this to select the atlas configuration to use.
    #   setup: M30-like
