genny:
  - on_localhost:
      checkout_repos:
        - source: git@github.com:10gen/genny.git
          target: ${bootstrap.genny_dir}
          branch: master
  - on_workload_client:
      upload_files:
        - source: ${bootstrap.genny_dir}
          target: ./genny
  - on_workload_client:
      exec: |
        set -eou pipefail

        # <System Setup>
        sudo yum update -y > ./yum-update.log
        # https://aws.amazon.com/premiumsupport/knowledge-center/ec2-enable-epel/
        sudo yum install -y https://s3-us-west-2.amazonaws.com/dsi-donot-remove/genny/epel-release-latest-7.noarch.rpm  || true > ./yum-epel-repo.log 2>&1
        sudo yum-config-manager --enable epel > ./yum-epel.log 2>&1
        sudo yum install -y gcc gcc-c++ cmake3 openssl-devel > ./yum-install.log 2>&1
        # </System Setup>

        # Install Dependencies
        #
        # If this ever becomes too annoying to do repeatedly,
        # the resulting 'install' directory can probably be
        # safely manually tar'ed up after doing the various compile steps
        # and re-used on later invocations. As of 2018-10-08, this only
        # saved 7 minutes of compile time and didn't seem to be worth
        # the added complexity.

        # go where we have more breathing room
        ln -s /media/ephemeral0/ ~/install || true
        pushd ~/install >/dev/null
          sudo rm -rf ./* # clear out any existing attempted installs

          # <Boost>
          wget --quiet https://s3-us-west-2.amazonaws.com/dsi-donot-remove/genny/boost_1_68_0.tar.gz
          tar xzf boost_1_68_0.tar.gz
          pushd boost_1_68_0 >/dev/null
            ./bootstrap.sh > ./configure.log 2>&1
            ./b2 stage -j "$(nproc)" --build-type=complete --layout=versioned variant=release threading=multi -d0 > ./stage.log 2>&1
            sudo ./b2 install -j "$(nproc)" -d0 > ./install.log  2>&1
          popd >/dev/null
          # </Boost>

          # <YamlCPP>
          # Commit 774f25800e6f19f4b927023c85d1389af322da5e is from master as of 2018-10-08
          git clone https://github.com/jbeder/yaml-cpp.git
          pushd yaml-cpp
            git checkout 774f25800e6f19f4b927023c85d1389af322da5e
            mkdir build
            pushd build >/dev/null
              cmake3 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. > ./configure.log 2>&1
              make -j "$(nproc)" 2>&1 | tee ./compile.log | grep '%'
              sudo make -j "$(nproc)" install > ./install.log 2>&1
            popd >/dev/null
          popd >/dev/null
          # </YamlCPP>

          # <Mongo C Driver>
          wget --quiet https://github.com/mongodb/mongo-c-driver/releases/download/1.13.0/mongo-c-driver-1.13.0.tar.gz
          tar xzf mongo-c-driver-1.13.0.tar.gz
          pushd mongo-c-driver-1.13.0 >/dev/null
            mkdir cmake-build
            pushd cmake-build >/dev/null
              cmake3 -DCMAKE_BUILD_TYPE=Release -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF .. > ./configure.log 2>&1
              make -j "$(nproc)" 2>&1 | tee ./compile.log | grep '%'
              sudo make -j "$(nproc)" install > ./install.log 2>&1
            popd >/dev/null
          popd >/dev/null
          # </Mongo C Driver>

          # <Mongo CXX Driver>
          git clone https://github.com/mongodb/mongo-cxx-driver.git --branch releases/stable --depth 1
          pushd mongo-cxx-driver/build >/dev/null
            cmake3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. > ./configure.log 2>&1
            # need to `sudo make` first line because it installs MNMLSTC core
            sudo make -j "$(nproc)" 2>&1 | tee ./compile.log | grep '%'
            sudo make -j "$(nproc)" install > ./install.log 2>&1
          popd >/dev/null
          # </Mongo CXX Driver>
        popd >/dev/null


        # genny itself
        pushd genny/build >/dev/null
          cmake3 -DCMAKE_CXX_FLAGS="-lpthread" -DCMAKE_BUILD_TYPE=Release ..
          make -j "$(nproc)"
        popd >/dev/null

mongoshell:
  - on_localhost:
      checkout_repos:
        - source: git@github.com:10gen/workloads.git
          target: ${bootstrap.workloads_dir}
  - on_workload_client:
      exec: rm -rf workloads*
  - on_workload_client:
      upload_files:
        - source: ${bootstrap.workloads_dir}
          target: ./workloads
  - on_workload_client:
      exec: |
        sudo pip install argparse python-dateutil pytz

fio:
  - on_workload_client:
      exec: |
        sudo yum -y -q install fio
      upload_repo_files:
        - source: bin/fio-test.sh
          target: fio-test.sh


iperf:
  - on_all_hosts:
      # Install iperf3. It isn't available in yum on AWS instances
      # TODO: This is very verbose. Please change this to yum install from EPEL instead.
      exec: |
        sudo yum groupinstall -y --quiet "Development tools"
        sudo yum install -y --quiet zlib-devel
        sudo killall iperf3
        rm -rf iperf
        git clone --quiet https://github.com/esnet/iperf
        cd iperf/
        git checkout --quiet d06415822a
        ./configure --quiet
        make --quiet
        sudo make install
      upload_repo_files:
        - source: bin/iperf-test.sh
          target: iperf-test.sh

tpcc:
  - on_localhost:
      checkout_repos:
        - source: git@github.com:10gen/py-tpcc.git
          target: ${bootstrap.tpcc_dir}
          branch: 52185e96bf28be6608ea65b61ff1d134b7cb3f13
  - on_workload_client:
      exec: rm -rf tpcc*
  - on_workload_client:
      upload_files:
        - source: ${bootstrap.tpcc_dir}
          target: ./tpcc
  - on_workload_client:
      exec: |
        python -m pip install pymongo==3.7.2 --user

linkbench:
  - on_workload_client:
      exec: |
        ${workload_setup.install_java}

        curl --retry 10 -fsS  \
          https://s3-us-west-2.amazonaws.com/dsi-donot-remove/utils/install_maven.sh | sudo bash
        rm *.rpm || true
# TODO: EVG-3317  modules can only track branches at the moment
# but master ==  f9cca9bcc2c45a409d34584dad49a095d7efccef. If we need to track
# a specific commit then this code will need to be placed back.
#  - on_localhost:
#      checkout_repos:
#        - source: git@github.com:10gen/linkbench.git
#          target: ${bootstrap.linkbench_dir}
#          branch: f9cca9bcc2c45a409d34584dad49a095d7efccef
  - on_workload_client:
      exec: rm -rf linkbench*
  - on_workload_client:
      upload_files:
        - source: ${bootstrap.linkbench_dir}
          target: ./linkbench
  - on_workload_client:
      exec: |
        export JAVA_HOME="/usr/java/jdk1.8.0_162/jre"
        source /etc/profile.d/maven.sh && cd /home/ec2-user/linkbench
        mvn --quiet clean package -DskipTests

ycsb:
  - on_workload_client:
      exec: |
        ${workload_setup.install_java}

        curl --retry 10 -fsS \
          https://s3-us-west-2.amazonaws.com/dsi-donot-remove/utils/install_maven.sh | sudo bash
        rm *.rpm || true
  - on_localhost:
      checkout_repos:
        - source: git@github.com:mongodb-labs/YCSB.git
          target: ${bootstrap.ycsb_dir}
          branch: 9e7888c5009e44a185b135104dd8456eea1deb1e
  - on_workload_client:
      exec: rm -rf ycsb*
  - on_workload_client:
      upload_files:
        - source: ${bootstrap.ycsb_dir}
          target: ./YCSB
  - on_workload_client:
      exec: |
        export JAVA_HOME="/usr/java/jdk1.8.0_162/jre"
        source /etc/profile.d/maven.sh && cd /home/ec2-user/YCSB/ycsb-mongodb && mvn -Dmongo.version=3.8.1 --quiet clean package

install_java: |
  curl -O --retry 10 -fsS \
    https://s3-us-west-2.amazonaws.com/dsi-donot-remove/java/jdk-8u162-linux-x64.rpm
  sudo rpm -i jdk-8u162-linux-x64.rpm
  sudo /usr/sbin/alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_162/bin/java 20000
