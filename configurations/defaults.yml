# Defaults for all config values used by Distributed Performance 2.0 modules.

bootstrap:
  infrastructure_provisioning: single
  platform: linux
  mongodb_setup: standalone
  workload_setup: common
  storageEngine: wiredTiger
  test_control: core
  production: false
  # Note: It's also allowed to upload your own binary. You can unset this by setting to the empty
  # string "" in bootstrap.yml
  mongodb_binary_archive: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-amazon-3.6.3.tgz
  workloads_dir: ./workloads
  ycsb_dir: ./YCSB
  linkbench_dir: ./linkbench
  authentication: disabled

infrastructure_provisioning:
  tfvars:
    cluster_name: default_cluster_name
    mongod_instance_count: 1
    workload_instance_count: 1

    mongod_instance_type: c3.8xlarge
    workload_instance_type: c3.8xlarge

    region: us-west-2
    availability_zone: us-west-2a

    ssh_user: ec2-user
    ssh_key_name: serverteam-perf-ssh-key
    ssh_key_file: aws_ssh_key.pem

    tags:
      expire-on-delta: 2     # adjust expire_on to today + expire-on-delta days
      owner: serverteam-perf@10gen.com
      Project: sys-perf
  numactl_prefix: numactl --interleave=all --cpunodebind=1
  evergreen:
    reuse_cluster: ${bootstrap.production}
    data_dir: /data/infrastructure_provisioning
  terraform:
    required_version: Terraform v0.10.4
    aws_required_version: 1.6.0

mongodb_setup:
  mongo_dir: mongodb
  journal_dir: /media/ephemeral1/journal
  clean_db_dir: true
  mongodb_binary_archive: ${bootstrap.mongodb_binary_archive}
  mongod_config_file:  # Note these defaults can be overridden by user, but not unset.
    net:
      port: 27017
      bindIp: 0.0.0.0
    processManagement:
      fork: true
    replication:
      oplogSizeMB: 153600   # 150GB oplog
    setParameter:
      enableTestCommands: 1
    storage:
      dbPath: data/dbs
      engine: wiredTiger
    systemLog:
      destination: file
      path: data/logs/mongod.log

  mongos_config_file:
    net:
      port: 27017
      bindIp: 0.0.0.0
    processManagement:
      fork: true
    setParameter:
      enableTestCommands: 1
    systemLog:
      destination: file
      path: data/logs/mongos.log

  rs_conf:
    settings:
      chainingAllowed: false

  configsvr_config_file:
    net:
      port: 27017
      bindIp: 0.0.0.0
    processManagement:
      fork: true
    setParameter:
      enableTestCommands: 1
    storage:
      dbPath: data/dbs
      engine: wiredTiger
    systemLog:
      destination: file
      path: data/logs/mongod.log

  topology:
    - cluster_type: standalone
      public_ip: ${infrastructure_provisioning.out.mongod.0.public_ip}
      private_ip: ${infrastructure_provisioning.out.mongod.0.private_ip}

  # these options are passed to the mongo shutdownServer command
  shutdown_options:
    force: true
    timeoutSecs: 30

  # these timeouts specify the max amount of milliseconds that the mongo shutdownServer command and
  # pkill mongo commands can run for.
  timeouts:
    shutdown_ms: 540000
    sigterm_ms: 60000

  meta:
    # The list of hosts that can be used in a mongodb connection string
    hosts: ${mongodb_setup.topology.0.private_ip}:27017
    is_sharded: false
    is_replset: false
    secondary: None

    # Meta-data used to determine scale_factor for a cluster
    storageEngine: ${mongodb_setup.mongod_config_file.storage.engine}
    # Number of primaries in the cluster. For non-sharded this
    # should be 1. For sharded will be the number of shards.
    primaries: 1
    secondaries: 0  # Secondaries per shard

  post_test:
    - on_all_servers:
        retrieve_files:
          - source: data/logs/
            target: ./
    - on_mongod:
        retrieve_files:
          - source: data/dbs/diagnostic.data
            target: ./diagnostic.data
    - on_configsvr:
        retrieve_files:
          - source: data/dbs/diagnostic.data
            target: ./diagnostic.data
  post_task:
    - on_all_servers:
        exec: |
          set -v
          rm -rf ./mdiag
          mkdir -p ./mdiag
          wget -O-  https://raw.githubusercontent.com/mongodb/support-tools/master/mdiag/mdiag.sh > ./mdiag/mdiag.sh
          # The "sys-perf" paramter to mdiag.sh is the 'reference'. As this is a support
          # tool, the reference would normally be a support case identifier.
          # For this example, it can be anything so that we don't
          # get a warning.
          # The output is written to "$TMPDIR/mdiag-$(hostname).json".
          # This json file is machine readable, rendering the
          # output to a more hunan friendly format is not done here.
          sudo TMPDIR=./mdiag bash ./mdiag/mdiag.sh sys-perf
    - on_all_servers:
        retrieve_files:
          - source: mdiag/
            target: ./

  # Enabled and disabled authentication and SSL settings.
  authentication:
    enabled:
      net:
        port: 27017
        bindIp: 0.0.0.0
        ssl:
          mode: preferSSL
          PEMKeyFile: ${mongodb_setup.mongo_dir}/member.pem
          PEMKeyPassword: server-perf
          CAFile: ${mongodb_setup.mongo_dir}/root.crt
      username: username
      password: password
      mongodb_url: mongodb://${mongodb_setup.authentication.enabled.username}:${mongodb_setup.authentication.enabled.password}@${mongodb_setup.meta.hosts}/admin?ssl=true
      # Get necessary SSL keys.
      pre_cluster_start:
        - on_all_hosts:
            upload_repo_files:
              - source: configurations/mongodb_setup/ssl/member.pem
                target: ${mongodb_setup.mongo_dir}/member.pem
              - source: configurations/mongodb_setup/ssl/root.crt
                target: ${mongodb_setup.mongo_dir}/root.crt
        - on_workload_client:
            upload_repo_files:
              - source: configurations/mongodb_setup/ssl/client.crt
                target: ${mongodb_setup.mongo_dir}/client.crt
              - source: configurations/mongodb_setup/ssl/client.key
                target: ${mongodb_setup.mongo_dir}/client.key
              - source: configurations/mongodb_setup/ssl/keystore.jks
                target: ${mongodb_setup.mongo_dir}/keystore.jks
              - source: configurations/mongodb_setup/ssl/root.crt
                target: ${mongodb_setup.mongo_dir}/root.crt
        - on_workload_client:
            exec: |
              export JAVA_HOME="/usr/java/jdk1.8.0_162"
              sudo $JAVA_HOME/bin/keytool -importcert -trustcacerts -file ${mongodb_setup.mongo_dir}/root.crt -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -noprompt
    disabled:
      net:
        port: 27017
        bindIp: 0.0.0.0
      mongodb_url: mongodb://${mongodb_setup.meta.hosts}/admin
      # This is just a placeholder for pre_cluster_start when we are not using SSL.
      pre_cluster_start:
        - on_workload_client:
            exec: |
              ls

  pre_cluster_start: ${mongodb_setup.authentication.${bootstrap.authentication}.pre_cluster_start}

test_control:
  task_name: default_task_name
  timeouts:
    no_output_ms: 5400000  # 90 minutes
  jstests_dir: ./jstests/hooks
  between_tests:
    - restart_mongodb:
        clean_logs: true
        clean_db_dir: true

  output_file:
    mongoshell: test_output.log
    ycsb: test_output.log
    fio: fio.json
    iperf: iperf.json

  # As I'm writing this, the basename IS the name. PERF-1096 will add a unique component.
  reports_dir_basename: reports
  perf_json:
    path: perf.json

  common_fio_config: |
    [global]
    directory=./data/fio
    filename_format=fiofile.$jobnum.$filenum
    size=1G
    runtime=120
    time_based
    group_reporting
    ioengine=libaio
    direct=1

    [setupfiles]
    stonewall
    filesize=1G
    nrfiles=16
    filename_format=fiofile.$filenum.0
    rw=randrw
    numjobs=1
    runtime=1

    [latency_test]
    stonewall
    description=This is for random read and write latency. 1 at a time
    rw=randrw
    numjobs=1
    bs=1
    ioengine=sync
    direct=0
    filesize=1G
    nrfiles=16
    filename_format=fiofile.$filenum.0

    [iops_test]
    stonewall
    description=How many iops can I sustain in parallel
    rw=randrw
    numjobs=32
    bs=4k
    iodepth=32

    [streaming_bandwidth_test]
    stonewall
    description=Measure streaming bandwidth
    rw=rw
    numjobs=16
    bs=16k
    iodepth=32

  common_fio_net_config: |
    [global]
    ioengine=net
    port=27019
    protocol=tcp
    bs=4k
    size=1g
    runtime=20
    time_based
    pingpong=1

    [sender]
    hostname=${mongodb_setup.meta.hostname}
    rw=write

  common_fio_net_config_listener: |
    [global]
    ioengine=net
    port=27019
    protocol=tcp
    bs=4k
    size=1g
    runtime=40
    time_based
    pingpong=1

    [receiver]
    listen
    rw=read

# add a delay before each test. Units are seconds but the value can be an int or float.
#  test_delay_seconds: 1
